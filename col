local cooldownRemote = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("GetPetCooldown")
local MOON_NAP_TEXT = "Moon Nap"
local UPDATE_INTERVAL = 1
local lastUpdate = os.clock()

-- Stores all active pet displays [petName] = textLabel
local activeDisplays = {}

-- Creates display if one doesn't exist, returns existing one if it does
local function getOrCreateDisplay(pet)
    local head = pet:FindFirstChild("Head") or pet:FindFirstChildWhichIsA("BasePart")
    if not head then return nil end
    
    -- Check for existing display
    local existing = head:FindFirstChild("PetCooldownDisplay")
    if existing then
        return existing.Frame.TextLabel
    end
    
    -- Create new display
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "PetCooldownDisplay"
    billboard.Size = UDim2.new(6, 0, 2, 0)
    billboard.StudsOffset = Vector3.new(0, 3.5, 0)
    billboard.AlwaysOnTop = true
    billboard.Adornee = head
    billboard.Parent = head

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundTransparency = 1
    frame.Parent = billboard

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = "Loading..."
    textLabel.TextColor3 = Color3.new(1, 1, 1)
    textLabel.Font = Enum.Font.GothamBold
    textLabel.TextSize = 18
    textLabel.TextStrokeTransparency = 0.5
    textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    textLabel.Parent = frame

    return textLabel
end

-- Updates a single pet's display text
local function updatePetDisplay(petName, display)
    local success, cooldownData = pcall(function()
        return cooldownRemote:InvokeServer(petName)
    end)

    if success and type(cooldownData) == "table" then
        local timeLeft = 0
        local hasAbility = false
        
        for _, entry in ipairs(cooldownData) do
            if type(entry) == "table" and entry.Passive == MOON_NAP_TEXT then
                timeLeft = entry.Time or 0
                hasAbility = true
                break
            end
        end

        if hasAbility then
            display.Text = timeLeft > 0 and string.format("%s: %ds", MOON_NAP_TEXT, timeLeft) 
                                      or string.format("%s: Ready!", MOON_NAP_TEXT)
            display.TextColor3 = timeLeft > 0 and Color3.new(1, 0.5, 0.5) 
                                             or Color3.new(0.5, 1, 0.5)
        else
            display.Text = "No "..MOON_NAP_TEXT
            display.TextColor3 = Color3.new(0.8, 0.8, 0.8)
        end
    else
        display.Text = "Error"
        display.TextColor3 = Color3.new(1, 0, 0)
    end
end

-- Main update loop
while true do
    local now = os.clock()
    local delta = now - lastUpdate
    
    -- Only run updates if at least 1 second has passed
    if delta >= UPDATE_INTERVAL then
        lastUpdate = now
    -- Find all current pets
        for _, petMover in ipairs(workspace.PetsPhysical:GetChildren()) do
            if petMover.Name == "PetMover" then
                for _, pet in ipairs(petMover:GetChildren()) do
                    if pet:IsA("Model") and pet.Name:match("^{.+}$") then
                    -- Get or create display
                        local display = activeDisplays[pet.Name] or getOrCreateDisplay(pet)
                        if display then
                            activeDisplays[pet.Name] = display
                            updatePetDisplay(pet.Name, display)
                        end
                    end
                end
            end
        end
    
    -- Clean up displays for pets that no longer exist
        for petName, display in pairs(activeDisplays) do
            if not workspace:FindFirstChild(petName, true) then
                if display.Parent then display.Parent:Destroy() end
                activeDisplays[petName] = nil
            end
        end
        task.wait(0.1)
    end
end
