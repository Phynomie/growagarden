local cooldownRemote = game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("GetPetCooldown")
local RunService = game:GetService("RunService")
local MOON_NAP_TEXT = "Moon Nap"

-- Stores all active pet displays {[petName] = {display = TextLabel, lastUpdate = time}}
local activeDisplays = {}
local petCache = {} -- Cache pet references to avoid frequent scans

-- Creates optimized display
local function createDisplay(head)
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "PetCooldownDisplay"
    billboard.Size = UDim2.new(6, 0, 2, 0)
    billboard.StudsOffset = Vector3.new(0, 3.5, 0)
    billboard.AlwaysOnTop = true
    billboard.Adornee = head
    billboard.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    billboard.Parent = head

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Font = Enum.Font.GothamBold
    textLabel.TextSize = 18
    textLabel.TextStrokeTransparency = 0.5
    textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    textLabel.Parent = billboard
    
    return textLabel
end

-- Batch update function
local function updateDisplays()
    local currentTime = os.clock()
    
    -- Process cached pets first
    for petName, data in pairs(petCache) do
        if not data.pet or not data.pet.Parent then
            if activeDisplays[petName] then
                activeDisplays[petName].display.Parent:Destroy()
                activeDisplays[petName] = nil
            end
            petCache[petName] = nil
        elseif currentTime - (activeDisplays[petName] and activeDisplays[petName].lastUpdate or 0) >= 1 then
            -- Only update if it's been at least 1 second
            local display = activeDisplays[petName] and activeDisplays[petName].display
                          or createDisplay(data.pet:FindFirstChild("Head") or data.pet:FindFirstChildWhichIsA("BasePart"))
            
            if display then
                -- Async cooldown check
                task.spawn(function()
                    local success, cooldownData = pcall(cooldownRemote.InvokeServer, cooldownRemote, petName)
                    
                    if success and type(cooldownData) == "table" then
                        local timeLeft, hasAbility = 0, false
                        for _, entry in ipairs(cooldownData) do
                            if type(entry) == "table" and entry.Passive == MOON_NAP_TEXT then
                                timeLeft = entry.Time or 0
                                hasAbility = true
                                break
                            end
                        end

                        display.Text = hasAbility and (timeLeft > 0 and string.format("%s: %ds", MOON_NAP_TEXT, timeLeft) 
                                                      or string.format("%s: Ready!", MOON_NAP_TEXT))
                                                or "No "..MOON_NAP_TEXT
                        display.TextColor3 = hasAbility and (timeLeft > 0 and Color3.new(1, 0.5, 0.5) 
                                                             or Color3.new(0.5, 1, 0.5))
                                                    or Color3.new(0.8, 0.8, 0.8)
                    else
                        display.Text = "Error"
                        display.TextColor3 = Color3.new(1, 0, 0)
                    end
                end)
                
                activeDisplays[petName] = {
                    display = display,
                    lastUpdate = currentTime
                }
            end
        end
    end
end

-- Initial pet scan (runs less frequently)
local function refreshPetCache()
    petCache = {}
    for _, petMover in ipairs(workspace.PetsPhysical:GetChildren()) do
        if petMover.Name == "PetMover" then
            for _, pet in ipairs(petMover:GetChildren()) do
                if pet:IsA("Model") and pet.Name:match("^{.+}$") then
                    petCache[pet.Name] = {pet = pet}
                end
            end
        end
    end
    return #petCache > 0
end

-- Main loop using Heartbeat for smooth updates
local accumulator = 0
RunService.Heartbeat:Connect(function(deltaTime)
    accumulator += deltaTime
    
    -- Full refresh every 10 seconds
    if accumulator >= 10 then
        accumulator = 0
        refreshPetCache()
    end
    
    -- Update displays every frame (throttled internally)
    updateDisplays()
end)

-- Initial setup
refreshPetCache()
