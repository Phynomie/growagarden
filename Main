local library = loadstring(game:HttpGetAsync("https://raw.githubusercontent.com/Phynomie/growagarden/main/Library"))()
local VirtualInputManager = game:GetService("VirtualInputManager")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local StarterGui = game:GetService("StarterGui")
local TweenService = game:GetService("TweenService")

local cleanupInstances = {
    countdownGui = nil,
    connections = {},
    loops = {}
}

local Main = library:CreateWindow("Grow a garden script (Creds to Phy)","Crimson")

local tab = Main:CreateTab("Exploits")
local tab2 = Main:CreateTab("Automation")
local tab3 = Main:CreateTab("Misc")

-- Farm protection system
local savedPrompts = {}
local playerFarm = nil
local enabled = nil

local function findPlayerFarm()
    local username = LocalPlayer.Name
    local farms = workspace:FindFirstChild("Farm")
    
    if not farms then
        warn("Farm system not found in workspace")
        return nil
    end

    for _, farmFolder in ipairs(farms:GetDescendants()) do
        if farmFolder.Name == "Owner" and farmFolder:IsA("StringValue") and farmFolder.Value == username then
            print("Found Your Farm! " .. username)
            return farmFolder.Parent.Parent.Parent
        end
    end
    
    warn("Could not find farm belonging to: " .. username)
    return nil
end

local function managePrompts(enable)
    if not playerFarm then
        playerFarm = findPlayerFarm()
        if not playerFarm then return end
    end

    for _, prompt in ipairs(playerFarm:GetDescendants()) do
        if prompt:IsA("ProximityPrompt") then
            local isEggORCratePrompt = false
            local current = prompt.Parent
            while current ~= nil and current ~= playerFarm do
                if current.Name == "PetEgg" or current.Name == "CosmeticCrate" then
                    isEggORCratePrompt = true
                    break
                end
                current = current.Parent
            end
            
            if not isEggORCratePrompt then
                if enable then
                    if not savedPrompts[prompt] then
                        savedPrompts[prompt] = {
                            Enabled = prompt.Enabled,
                            HoldDuration = prompt.HoldDuration,
                            ActionText = prompt.ActionText
                        }
                    end
                    prompt.Enabled = false
                    prompt.HoldDuration = math.huge
                    prompt.ActionText = "Disabled"
                else
                    if savedPrompts[prompt] then
                        prompt.Enabled = savedPrompts[prompt].Enabled
                        prompt.HoldDuration = savedPrompts[prompt].HoldDuration
                        prompt.ActionText = savedPrompts[prompt].ActionText
                    end
                end
            end
        end
    end
end

local function simulateClick(x, y)
    VirtualInputManager:SendMouseMoveEvent(x, y, game)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, true, game, 1)
    task.wait(0.1)
    VirtualInputManager:SendMouseButtonEvent(x, y, 0, false, game, 1)
end

local function sendNotification(title, text, duration)
    StarterGui:SetCore("SendNotification", {
        Title = title,
        Text = text,
        Duration = duration or 5,
        Icon = "rbxassetid://6726579484"
    })
end

local function autoBuySeeds()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 10000000000 then -- 1 billion
        sendNotification("GAG Script", "You can only use this if you have more than 10B sheckles!")
        return
    end

    local seedShop = LocalPlayer.PlayerGui:FindFirstChild("Seed_Shop")
    if not seedShop then
        sendNotification("GAG Script", "Seed shop not open!")
        return
    end

    local scrollingFrame = seedShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuySeedStock"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.." seeds!")
                end
            end
        end
    end
end

local function autoBuyGears()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 10000000000 then -- 1 billion
        sendNotification("GAG Script", "You can only use this if you have more than 10B sheckles!")
        return
    end

    local gearShop = LocalPlayer.PlayerGui:FindFirstChild("Gear_Shop")
    if not gearShop then
        sendNotification("GAG Script", "Gear shop not open!")
        return
    end

    local scrollingFrame = gearShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyGearStock"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.." gears!")
                end
            end
        end
    end
end

local function autoBuyEggs()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 10000000000 then -- 1 billion
        sendNotification("GAG Script", "You can only use this if you have more than 10B sheckles!")
        return
    end

    local eggShop = LocalPlayer.PlayerGui:FindFirstChild("PetShop_UI")
    if not eggShop then
        sendNotification("GAG Script", "Gear shop not open!")
        return
    end

    local scrollingFrame = eggShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyPetEgg"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.."!")
                end
            end
        end
    end
end

local function autoBuyTM()
    local sheckles = LocalPlayer.leaderstats.Sheckles.Value
    if sheckles < 10000000000 then -- 1 billion
        sendNotification("GAG Script", "You can only use this if you have more than 10B sheckles!")
        return
    end

    local TMShop = LocalPlayer.PlayerGui:FindFirstChild("TravelingMerchantShop_UI")
    if not TMShop then
        sendNotification("GAG Script", "Gear shop not open!")
        return
    end

    local scrollingFrame = TMShop.Frame:FindFirstChildOfClass("ScrollingFrame")
    if not scrollingFrame then return end

    for _, frame in ipairs(scrollingFrame:GetChildren()) do
        if not frame.Name:find("_Padding") and frame:FindFirstChild("Main_Frame") then
            local mainFrame = frame.Main_Frame
            local stockText = mainFrame:FindFirstChild("Stock_Text")
            
            if stockText and stockText.Text ~= "X0 Stock" then
                local stockNum = tonumber(stockText.Text:match("X(%d+)"))
                if stockNum and stockNum > 0 then
                    for i = 1, stockNum do
                        local args = {frame.Name}
                        ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("BuyTravelingMerchantShopStock"):FireServer(unpack(args))
                        task.wait(0.1)
                    end
                    sendNotification("GAG Script", "Bought "..stockNum.." "..frame.Name.."!")
                end
            end
        end
    end
end

tab:CreateToggle("Anti Collect Fruits", function(a)
    if a then
        managePrompts(true)
    else
        managePrompts(false)
    end
end)

-- Weight Calculator Toggle
-- Weight Calculator Toggle
tab:CreateToggle("Weight Calculator", function(enabled)
    if enabled then

        if not game:IsLoaded() then
            warn("Game must be fully loaded to use Weight Calculator")
            return false
        end

        local success, services = pcall(function()
            return {
                ReplicatedStorage = game:GetService("ReplicatedStorage"),
                RunService = game:GetService("RunService"),
                UserInputService = game:GetService("UserInputService"),
                Players = game:GetService("Players")
            }
        end)

        if not success then
            warn("Failed to load Notification module: "..tostring(err))
            return false
        end

        local Notification
        local success, err = pcall(function()
            Notification = require(services.ReplicatedStorage.Modules.Notification)
        end)
        if not success then
            warn("Failed to load Notification module: "..tostring(err))
            return false
        end

        -- First check if we already have a Weight Calculator
        local existingTool = LocalPlayer.Backpack:FindFirstChild("Weight Calculator") or 
                           (LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Weight Calculator"))
        
        if existingTool then
            -- Ensure it has the right attributes
            existingTool:SetAttribute("Uses", 999999)
            sendNotification("Info", "Using existing Weight Calculator", 3)
        else
            -- Try to find and duplicate a Magnifying Glass
            local foundTool = nil
            for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                if player ~= LocalPlayer then
                    local tool = player.Backpack:FindFirstChild("Magnifying Glass") or player.Character:FindFirstChild("Magnifying Glass")
                    if tool then
                        foundTool = tool
                        break
                    end
                end
            end

            if not foundTool then
                sendNotification("Error", "No Magnifying Glass found on any player! You must obtain one first.", 5)
                return false
            end

            -- Create a proper clone
            local clone = foundTool:Clone()
            clone:SetAttribute("Uses", 999999)
            clone.Parent = LocalPlayer.Backpack
            
            -- Wait for the clone to appear in backpack
            wait(0.3)
            
            -- Find all Magnifying Glasses in backpack
            local glasses = {}
            for _, tool in ipairs(LocalPlayer.Backpack:GetChildren()) do
                if tool:IsA("Tool") and tool.Name:match("^Magnifying Glass") then
                    table.insert(glasses, tool)
                end
            end

            -- Rename logic:
            if #glasses >= 2 then
                -- If 2+ glasses found, rename the second one
                glasses[2].Name = "Weight Calculator"
                existingTool = glasses[2]
                sendNotification("Success", "Renamed "..glasses[2].Name.." to Weight Calculator", 3)
            elseif #glasses == 1 then
                -- If only 1 found, rename it
                glasses[1].Name = "Weight Calculator"
                existingTool = glasses[1]
                sendNotification("Success", "Created Weight Calculator from "..glasses[1].Name, 3)
            else
                sendNotification("Error", "No Magnifying Glass tools found to rename", 5)
                return false
            end
        end

        -- Set up click detection
        local clickConnection
        local lastClickTime = 0

        local function onMouseClick(input, gameProcessed)
            if input.UserInputType ~= Enum.UserInputType.MouseButton1 
               or gameProcessed 
               or tick() - lastClickTime < 0.4 then
                return
            end
            lastClickTime = tick()

            -- Check if holding Weight Calculator
            local character = LocalPlayer.Character
            if not character then return end

            local tool = character:FindFirstChild("Weight Calculator")
            if not tool then 
                Notification:CreateNotification("You need to equip the Weight Calculator first 🔎")
                return
            end

            -- Perform raycast
            local raycastParams = RaycastParams.new()
            raycastParams.FilterDescendantsInstances = {workspace.Farm}
            raycastParams.FilterType = Enum.RaycastFilterType.Include

            local mousePos = UserInputService:GetMouseLocation()
            local camera = workspace.CurrentCamera
            local ray = camera:ViewportPointToRay(mousePos.X, mousePos.Y)

            local raycastResult = workspace:Raycast(ray.Origin, ray.Direction * 1000, raycastParams)
            if not raycastResult then return end

            -- Find the harvestable plant
            local hitModel = raycastResult.Instance:FindFirstAncestorWhichIsA("Model")
            if not hitModel or not hitModel:HasTag("Harvestable") then return end

            -- Check for weight value
            local weight = hitModel:FindFirstChild("Weight")
            if weight and weight:IsA("NumberValue") then
                Notification:CreateNotification("Weight: "..tostring(weight.Value).." kg ⚖️")
            else
                Notification:CreateNotification("No weight data found! ⚖️")
            end

            -- Highlight the plant
            local highlight = Instance.new("Highlight")
            highlight.Name = "WeightHighlight"
            highlight.FillColor = Color3.new(1, 0.5, 0) -- Orange color
            highlight.FillTransparency = 0.7
            highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
            highlight.OutlineTransparency = 0
            highlight.DepthMode = Enum.HighlightDepthMode.Occluded
            highlight.Adornee = hitModel
            highlight.Parent = workspace

            task.delay(2, function()
                highlight:Destroy()
            end)
        end

        -- Store connection for cleanup
        clickConnection = UserInputService.InputBegan:Connect(onMouseClick)
        cleanupInstances.connections["WeightCalculator"] = clickConnection

        sendNotification("Enabled", "Weight Calculator active - click fruits while holding the tool", 5)
    else
        -- Clean up when toggled off
        if cleanupInstances.connections["WeightCalculator"] then
            cleanupInstances.connections["WeightCalculator"]:Disconnect()
            cleanupInstances.connections["WeightCalculator"] = nil
        end
        
        -- Remove Weight Calculator tool when disabled
        if LocalPlayer.Backpack:FindFirstChild("Weight Calculator") then
            LocalPlayer.Backpack["Weight Calculator"]:Destroy()
        end
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Weight Calculator") then
            LocalPlayer.Character["Weight Calculator"]:Destroy()
        end
        
        sendNotification("Disabled", "Weight Calculator turned off and removed", 3)
    end
end)

tab:CreateToggle("Anti-Kick", function(enabled)
    local namecallHook
    
    if enabled then
        -- Create the hook when toggle is enabled
        namecallHook = hookmetamethod(game.Players.LocalPlayer, "__namecall", function(...)
            local method = getnamecallmethod()
            if method == "Kick" then
                print("[Anti-Kick] Blocked kick attempt")
                return nil
            end
            return namecallHook(...)
        end)

        -- Verify the hook was successful
        if typeof(namecallHook) == "function" then
            print("[Anti-Kick] Protection enabled successfully")
        else
            warn("[Anti-Kick] Failed to create protection!")
            return
        end

        -- Store the hook in cleanup table
        cleanupInstances.connections["AntiKick"] = namecallHook
    else
        -- Disable the hook when toggle is turned off
        if cleanupInstances.connections["AntiKick"] then
            if unhookmetamethod then
                unhookmetamethod(game.Players.LocalPlayer, "__namecall", cleanupInstances.connections["AntiKick"])
            end
            cleanupInstances.connections["AntiKick"] = nil
            print("[Anti-Kick] Protection disabled")
        end
    end
end)

tab:CreateToggle("Anti-Afk", function(enabled)
    if enabled then
        sendNotification("✅ Anti-AFK", "Anti AFK has been enabled.", 5)
        
        -- Disable all existing Idled connections
        for _, connection in pairs(getconnections(game.Players.LocalPlayer.Idled)) do
            connection:Disable()
            -- Store disabled connections for re-enabling later
            table.insert(cleanupInstances.connections, {
                connection = connection,
                enabled = connection.Enabled -- Store original state
            })
        end
        
        -- Create a new simulated activity loop
        local antiAfkLoop = game:GetService("RunService").Heartbeat:Connect(function()
            game:GetService("VirtualUser"):Button2Down(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
            game:GetService("VirtualUser"):Button2Up(Vector2.new(0,0), workspace.CurrentCamera.CFrame)
        end)
        
        -- Store the loop in cleanup
        cleanupInstances.connections["AntiAfkLoop"] = antiAfkLoop
        
    else
        sendNotification("❌ Anti-AFK", "Anti AFK has been disabled.", 5)
        
        -- Re-enable original Idled connections
        for _, connectionData in pairs(cleanupInstances.connections) do
            if typeof(connectionData) == "table" and connectionData.connection then
                connectionData.connection.Enabled = connectionData.enabled
            end
        end
        
        -- Disconnect the activity loop
        if cleanupInstances.connections["AntiAfkLoop"] then
            cleanupInstances.connections["AntiAfkLoop"]:Disconnect()
            cleanupInstances.connections["AntiAfkLoop"] = nil
        end
    end
end)

tab:CreateButton("Sell Equipped Fruit", function()
    local steven = workspace.NPCS:FindFirstChild("Steven")
    if not steven then
        warn("Steven NPC not found!")
        return
    end
    
    local npcHRP = steven:FindFirstChild("HumanoidRootPart")
    if not npcHRP then
        warn("Steven doesn't have HumanoidRootPart!")
        return
    end
    local playerChar = LocalPlayer.Character
    if not playerChar then
        warn("Player character not found!")
        return
    end
    
    local playerHRP = playerChar:FindFirstChild("HumanoidRootPart")
    if not playerHRP then
        warn("Player doesn't have HumanoidRootPart!")
        return
    end
    
    local originalCFrame = playerHRP.CFrame
    
    playerHRP.CFrame = npcHRP.CFrame * CFrame.new(0, 0, -3) 
    
    task.wait(0.2)
    
    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Item"):FireServer()
    
    task.wait(0.2)
    
    playerHRP.CFrame = originalCFrame
end)

tab:CreateButton("Sell All Fruits", function()
    local steven = workspace.NPCS:FindFirstChild("Steven")
    if not steven then
        warn("Steven NPC not found!")
        return
    end
    
    local npcHRP = steven:FindFirstChild("HumanoidRootPart")
    if not npcHRP then
        warn("Steven doesn't have HumanoidRootPart!")
        return
    end
    local playerChar = LocalPlayer.Character
    if not playerChar then
        warn("Player character not found!")
        return
    end
    
    local playerHRP = playerChar:FindFirstChild("HumanoidRootPart")
    if not playerHRP then
        warn("Player doesn't have HumanoidRootPart!")
        return
    end
    
    local originalCFrame = playerHRP.CFrame
    
    playerHRP.CFrame = npcHRP.CFrame * CFrame.new(0, 0, -3) 
    
    task.wait(0.2)
    
    game:GetService("ReplicatedStorage"):WaitForChild("GameEvents"):WaitForChild("Sell_Inventory"):FireServer()
    
    task.wait(0.2)
    
    playerHRP.CFrame = originalCFrame
end)

local autoBuyActive = false
cleanupInstances.loops.buyLoop = nil

local function stopBuyLoop()
    if cleanupInstances.loops.buyLoop then
        coroutine.close(cleanupInstances.loops.buyLoop)
        cleanupInstances.loops.buyLoop = nil
    end
    autoBuyActive = false
    if frame then frame.Visible = false end
end

local countdownGui = Instance.new("ScreenGui")
countdownGui.Name = "AutoBuyCountdown"
countdownGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 50)
frame.Position = UDim2.new(0.085, 0, 0.7, 0)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.BackgroundTransparency = 0.5
frame.BorderSizePixel = 0
frame.Visible = false
frame.Parent = countdownGui

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0.4, 0)
title.Position = UDim2.new(0, 0, 0, 0)
title.BackgroundTransparency = 1
title.Text = "Next Auto-Buy In:"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.Font = Enum.Font.Gotham
title.TextSize = 14
title.Parent = frame

local timerText = Instance.new("TextLabel")
timerText.Size = UDim2.new(1, 0, 0.6, 0)
timerText.Position = UDim2.new(0, 0, 0.4, 0)
timerText.BackgroundTransparency = 1
timerText.Text = "60s"
timerText.TextColor3 = Color3.fromRGB(255, 255, 255)
timerText.Font = Enum.Font.GothamBold
timerText.TextSize = 18
timerText.Parent = frame

local progressBar = Instance.new("Frame")
progressBar.Size = UDim2.new(1, 0, 0, 3)
progressBar.Position = UDim2.new(0, 0, 1, -3)
progressBar.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
progressBar.BorderSizePixel = 0
progressBar.Parent = frame

local progressFill = Instance.new("Frame")
progressFill.Size = UDim2.new(1, 0, 1, 0)
progressFill.Position = UDim2.new(0, 0, 0, 0)
progressFill.BackgroundColor3 = Color3.fromRGB(220, 20, 60) -- Crimson
progressFill.BorderSizePixel = 0
progressFill.Parent = progressBar

local function startBuyLoop()
    cleanupInstances.loops.buyLoop = coroutine.create(function()
        while autoBuyActive do
            frame.Visible = true
            
            autoBuySeeds()
            autoBuyGears()
            autoBuyEggs()
            autoBuyTM()
            
            for i = 60, 1, -1 do
                if not autoBuyActive then break end
                
                timerText.Text = i.."s"
                progressFill.Size = UDim2.new(i/60, 0, 1, 0)
                
                local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Linear)
                local tween = TweenService:Create(progressFill, tweenInfo, {Size = UDim2.new((i-1)/60, 0, 1, 0)})
                tween:Play()
                
                task.wait(1)
            end
        end
        stopBuyLoop()
    end)
    coroutine.resume(cleanupInstances.loops.buyLoop)
end

tab2:CreateToggle("Auto Buy Seed/Gear/Egg/TM", function(a)
    autoBuyActive = a
    
    if a then
        if not cleanupInstances.loops.buyLoop then
            startBuyLoop()
        end
    else
        stopBuyLoop()
    end
end)

-- Auto Pickup Fruits with Mutation
local selectedMutation = nil
local autoPickupActive = false

-- List of attributes to ignore in the dropdown
local IGNORED_ATTRIBUTES = {
    "DoneGrowTime",
    "GrowRateMulti",
    "MaxAge",
    "FruitSpawnIndex",
    "FruitVersion",
    "WeightMulti",
    "SetVariant",
    "IsOutlined",
    "Inspected"
}

-- Function to scan farm for all available mutations (excluding ignored ones)
local function scanForMutations()
    local mutationList = {}
    
    if not playerFarm then
        playerFarm = findPlayerFarm()
        if not playerFarm then return mutationList end
    end

    local plantsPhysical = playerFarm:FindFirstChild("Important"):FindFirstChild("Plants_Physical")
    if plantsPhysical then
        for _, plant in pairs(plantsPhysical:GetChildren()) do
            -- Check for Fruits folder
            local fruitsFolder = plant:FindFirstChild("Fruits")
            if fruitsFolder then
                for _, fruit in pairs(fruitsFolder:GetChildren()) do
                    -- Get all attributes (mutations)
                    for attrName, _ in pairs(fruit:GetAttributes()) do
                        -- Only add if not in ignored list
                        if not table.find(IGNORED_ATTRIBUTES, attrName) and not table.find(mutationList, attrName) then
                            table.insert(mutationList, attrName)
                        end
                    end
                end
            else
                -- Check the plant itself if no Fruits folder
                for attrName, _ in pairs(plant:GetAttributes()) do
                    if not table.find(IGNORED_ATTRIBUTES, attrName) and not table.find(mutationList, attrName) then
                        table.insert(mutationList, attrName)
                    end
                end
            end
        end
    end
    
    return mutationList
end

-- Create the mutation dropdown with filtered mutations
local mutationDropdown = tab2:CreateDDO("Select Mutation", {}, function(selected)
    selectedMutation = selected
end)

-- Update mutation list initially and when farm changes (with ignored attributes filtered out)
task.spawn(function()
    while true do
        local mutations = scanForMutations() -- This now returns only non-ignored attributes
        mutationDropdown:SetOptions(mutations)
        wait(30) -- Rescan every 30 seconds
    end
end)

-- Auto pickup function (unchanged)
local function collectFruitsWithMutation()
    while autoPickupActive and selectedMutation do
        if not playerFarm then
            playerFarm = findPlayerFarm()
            if not playerFarm then break end
        end

        local plantsPhysical = playerFarm:FindFirstChild("Important"):FindFirstChild("Plants_Physical")
        if plantsPhysical then
            for _, plant in pairs(plantsPhysical:GetChildren()) do
                -- Recursive function to scan all fruit parts
                local function scanFruitModel(model)
                    if model:GetAttribute(selectedMutation) then
                        -- Find the proximity prompt at any level
                        local prompt = model:FindFirstChildWhichIsA("ProximityPrompt")
                        if not prompt then
                            -- Deep search for prompts in all descendants
                            for _, descendant in pairs(model:GetDescendants()) do
                                if descendant:IsA("ProximityPrompt") then
                                    prompt = descendant
                                    break
                                end
                            end
                        end
                        
                        -- If prompt found, collect the fruit
                        if prompt then
                            -- Teleport to fruit
                            local char = LocalPlayer.Character
                            if char and char:FindFirstChild("HumanoidRootPart") then
                                local hrp = char.HumanoidRootPart
                                local originalPos = hrp.CFrame
                                
                                -- Teleport close to fruit
                                hrp.CFrame = model:GetPivot() * CFrame.new(0, 0, -2)
                                
                                -- Fire prompt
                                task.wait(0.2)
                                fireproximityprompt(prompt)
                                
                                -- Return to original position
                                task.wait(0.1)
                                hrp.CFrame = originalPos
                            end
                        end
                    end
                end

                -- Check both Fruits folder and direct children
                local fruitsFolder = plant:FindFirstChild("Fruits")
                if fruitsFolder then
                    for _, fruit in pairs(fruitsFolder:GetChildren()) do
                        -- Scan the fruit and all its nested children
                        scanFruitModel(fruit)
                        for _, subPart in pairs(fruit:GetDescendants()) do
                            if subPart:IsA("Model") or subPart:IsA("BasePart") then
                                scanFruitModel(subPart)
                            end
                        end
                    end
                else
                    -- Check the plant itself if no Fruits folder
                    scanFruitModel(plant)
                end
            end
        end
        
        task.wait(0.5) -- Delay between scans
    end
end

-- Create the toggle (unchanged)
tab2:CreateToggle("Auto Pickup Fruits with mutation", function(state)
    autoPickupActive = state
    if state then
        if not selectedMutation then
            sendNotification("Pickup Error", "Select a mutation first!", 5)
            return
        end
        task.spawn(collectFruitsWithMutation)
        sendNotification("Auto Pickup", "Started collecting "..selectedMutation, 5)
    else
        sendNotification("Auto Pickup", "Stopped collecting", 3)
    end
end)

local selectedPlayer = nil
local playerDropdown = tab3:CreateDDO("Send Trade Only To:", {}, function(selected)
    selectedPlayer = selected
end)

-- Function to update player list
local function updatePlayerList()
    local playerList = {}
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= LocalPlayer then -- Don't include yourself
            table.insert(playerList, player.Name)
        end
    end
    playerDropdown:SetOptions(playerList)
end

-- Initial update
updatePlayerList()

-- Update when players join/leave
local playerAddedConn = Players.PlayerAdded:Connect(function(player)
    updatePlayerList()
end)

local playerRemovingConn = Players.PlayerRemoving:Connect(function(player)
    updatePlayerList()
    if selectedPlayer == player.Name then
        selectedPlayer = nil
        playerDropdown:Clear()
    end
end)

-- Store connections for cleanup
table.insert(cleanupInstances.connections, playerAddedConn)
table.insert(cleanupInstances.connections, playerRemovingConn)

-- Modified Send Trade button
tab3:CreateButton("Send to Player", function()
    local self = game:GetService("Players").LocalPlayer
    if not selectedPlayer then 
        sendNotification("Trade Error", "Select a player first!", 3)
        return 
    end
    
    local targetPlayer = game:GetService("Players"):FindFirstChild(selectedPlayer)
    if not targetPlayer then 
        sendNotification("Trade Error", "Player not found!", 3)
        return 
    end

    -- Get equipped item with natural delay
    task.wait(0.2)
    local heldObject = nil
    local character = self.Character
    if character then
        for _, tool in pairs(character:GetChildren()) do
            if tool:IsA("Tool") then
                if string.find(tool.Name, "%[Age %d+%]") or
                   string.find(tool.Name:lower(), "%[%d+%.?%d*kg%]") or
                   string.find(tool.Name:lower(), "%[%d+%.?%d* kg%]") then
                    heldObject = tool
                    break
                end
            end
        end
    end

    if not heldObject then
        sendNotification("Trade Error", "You're not holding anything tradable!", 3)
        return
    end

    -- Handle pet trade differently
    if string.find(heldObject.Name, "%[Age %d+%]") then
        task.wait(0.3) -- Natural delay
        game:GetService("ReplicatedStorage").GameEvents.PetGiftingService:FireServer("GivePet", targetPlayer)
        sendNotification("Trade Sent", "Sent pet to "..targetPlayer.Name, 3)
        return
    end

    -- Natural trade approach
    local targetChar = targetPlayer.Character
    local selfChar = LocalPlayer.Character

    if targetChar and selfChar then
        local targetHRP = targetChar:FindFirstChild("HumanoidRootPart")
        local selfHRP = selfChar:FindFirstChild("HumanoidRootPart")
        
        if targetHRP and selfHRP then
            -- Walk naturally toward player instead of teleporting
            local humanoid = selfChar:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:MoveTo(targetHRP.Position + Vector3.new(2, 0, 2))
                task.wait(1) -- Wait to reach player
            end

            -- Find prompt naturally
            local prompt = targetHRP:FindFirstChildOfClass("ProximityPrompt")
            if prompt then
                -- Human-like interaction delay
                task.wait(0.5)
                
                -- Single prompt fire (no spamming)
                fireproximityprompt(prompt)
                sendNotification("Trade Sent", "Sent trade to "..targetPlayer.Name, 3)
                
                -- Walk back naturally
                task.wait(0.5)
                if humanoid then
                    humanoid:MoveTo(selfHRP.Position)
                end
            end
        end
    end
end)

tab3:CreateButton("Sprinker Script", function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Phynomie/tg/refs/heads/main/script.lua"))()
end)

tab:Show()

library.OnDestroy = function()
    print("Destroying all created instances...")
    
    -- Stop all loops
    for _, loop in pairs(cleanupInstances.loops) do
        if type(loop) == "thread" then
            coroutine.close(loop)
        end
    end
    
    -- Disconnect all connections
    for _, connection in ipairs(cleanupInstances.connections) do
        if connection.Connected then
            connection:Disconnect()
        end
    end
    
    -- Reset prompts
    managePrompts(false)
    
    -- Destroy GUI instances
    if cleanupInstances.countdownGui then
        cleanupInstances.countdownGui:Destroy()
    end
    
    -- Reset variables
    enabled = nil
    autoBuyActive = false
    savedPrompts = {}
    playerFarm = nil
    
    -- Clear tables
    cleanupInstances.connections = {}
    cleanupInstances.loops = {}
    
    print("Cleanup complete!")
end
